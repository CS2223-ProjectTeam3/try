package com.company;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import java.util.ArrayList;

import java.util.LinkedList;

public class Main {

    static int count = 0;

    //https://github.com/simenhos/boyer-more-horspool/blob/master/boyerMooreHorspool.java
    static public void boyerMooreHorspool(char[] needle, char[] haystack){
        long startTime = System.nanoTime();

    int[] badShift = new int[10000];
    int wildcardindex = 0;
    ArrayList<Integer> list = new ArrayList<Integer>();
    int offset = 0;
    int scan = 0;
    int last = needle.length -1;
    int maxoffset = haystack.length - needle.length;
    char wildcard = '_';

    //Counting until finding a wildcard
    for(int i = needle.length-1; i >= 0; i--){
        if(needle[i] == wildcard){
            break;
        }
        //Wildcard becomes needle's length if there are no wildcards
        wildcardindex++;
    }

    //If wildcard is first in the haystack(from right to left)
    if(wildcardindex == 0){
        wildcardindex = 1;
    }

    //Setting the shifs
    for(int i = 0; i < 10000; i++){
        badShift[i] = wildcardindex;
    }

    for(int i = 0; i < last; i++){
        badShift[needle[i]] = last - i;
    }


    //Goes through while we can have potential matches
    while(offset <= maxoffset){

        //Scan is set to last which is needle's length -1, if needle is equal haystack or needle is a wildcard we go to neighbour
        for(scan = last; (needle[scan] == haystack[scan+offset] || needle[scan] == (int) wildcard); scan--){

            //Match is found and added to the list and the loop breaks
            if(scan == 0){
                count++;
                list.add(offset);
                break;
            }
        }
        //The offset is set to last offset pluss the one we just scanned through
        offset += badShift[(int) haystack[offset + last]];
    }


        long endTime = System.nanoTime();
        long duration = (endTime - startTime);
        System.out.println("Go to location " + count + ".\nTime taken to find: " + duration + ".");
}

    static LinkedList<String> readEle() throws IOException {


        File file = new File("/Users/amyorozco/Downloads/Horspools/src/csm-random.txt");

        LinkedList<String> words = new LinkedList<>();

        BufferedReader br = new BufferedReader(new FileReader(file));
        String st;

        String[] wordz =  {};
        while((st = br.readLine()) != null) {
            String strNew = st;
            String word1 = strNew.replace(",", "");
            String word2 = word1.replace(";", "");
            String word3 = word2.replace(".","");
            String word4 = word3.replace(")","");
            String word5 = word4.replace("?", "");
            String word6 = word5.replace("!", "");
            String word7 = word6.replace("(","");
            String word = word7.replace("\"","");
            //System.out.println(st);
            wordz = word.split(" ");
            for(int i = 0; i< wordz.length; i++){

                String w = wordz[i];
                //System.out.println("word after" + w);
                words.add(w);
            }
        }

        return words;
    }

    public static void main(String[] args) throws IOException {

        //new String(Files.readAllBytes())
        LinkedList<String> words = readEle();
        System.out.println(words.size());
        String word = "";
        for(int i = 0; i < words.size();i++){
            word = word+words.get(i);
            //System.out.println(word);

        }
        //System.out.println(word);
        char txt[] = word.toCharArray();
        char pat[] = "acadiaâ€™park".toCharArray();

        boyerMooreHorspool( pat, txt);
        System.out.println(count);
    }
}
